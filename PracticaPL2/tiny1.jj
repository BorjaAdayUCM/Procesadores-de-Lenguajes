options  {
  STATIC=false;
}  
PARSER_BEGIN(AnalizadorSintacticoTiny)
package analizadorSintactico;

public class AnalizadorSintacticoTiny {}
PARSER_END(AnalizadorSintacticoTiny)

  TOKEN:{<#letra:["a"-"z","A"-"Z"]>}
  TOKEN:{<#digitoPositivo:["1"-"9"]>}
  TOKEN:{<#digito:<digitoPositivo>|"0">} 
  TOKEN:{<#parteEntera:<digitoPositivo> (<digito>)*|"0">} 
  TOKEN:{<#numeroEntero:("+"|"-")?<parteEntera>>}
  TOKEN:{<#parteDecimal:"."("0"|(<digito>)*<digitoPositivo>)>}
  TOKEN:{<#parteExponencial:("E"|"e")<numeroEntero>>}
  TOKEN:{<#numeroReal:<numeroEntero>(<parteDecimal>|<parteExponencial>|<parteDecimal><parteExponencial>)>}
  TOKEN:{<#identificador:<letra>(<letra>|<digito>|"_")>}
  TOKEN:{<#cadena:"\"(~["\"","\t","\b","\r","\n"])*"\"">}

  SKIP:{<["\t"," ","\r","\b","\n"]>}  
  SKIP:{<"#"(~["\n"])*>} 
  
  TOKEN: {<int:"int">}
  TOKEN: {<real:"real">}
  TOKEN: {<bool:"bool">}
  TOKEN: {<string:"string">}
  TOKEN: {<and:"and">}
  TOKEN: {<or:"or">}
  TOKEN: {<not:"not">}
  TOKEN: {<null:"null">}
  TOKEN: {<true:"true">}
  TOKEN: {<false:"false">}
  TOKEN: {<proc:"proc">}
  TOKEN: {<if:"if">}
  TOKEN: {<then:"then">}
  TOKEN: {<else:"else">}
  TOKEN: {<endif:"endif">}
  TOKEN: {<while:"while">}
  TOKEN: {<do:"do">}
  TOKEN: {<endwhile:"endwhile">}
  TOKEN: {<call:"call">}
  TOKEN: {<record:"record">}
  TOKEN: {<array:"array">}
  TOKEN: {<of:"of">}
  TOKEN: {<pointer:"pointer">}
  TOKEN: {<new:"new">}
  TOKEN: {<delete:"delete">}
  TOKEN: {<read:"read">}
  TOKEN: {<write:"write">}
  TOKEN: {<nl:"nl">}
  TOKEN: {<var:"var">}
  TOKEN: {<type:"type">}
  TOKEN: {<suma:"+">}
  TOKEN: {<resta:"-">}
  TOKEN: {<multiplicacion:"*">}
  TOKEN: {<division:"/">}
  TOKEN: {<bool:"bool">}
  TOKEN: {<sep:"&&">}
  TOKEN: {<modulo:"%">}
  TOKEN: {<menor:"<">}
  TOKEN: {<mayor:">">}
  TOKEN: {<menorIgual:"<=">}
  TOKEN: {<mayorIgual:">=">}
  TOKEN: {<igualdad:"==">}
  TOKEN: {<distinto:"!=">}
  TOKEN: {<pApert:"(">}
  TOKEN: {<pCierre:")">}
  TOKEN: {<pyc:";">}
  TOKEN: {<igual:"=">}
  TOKEN: {<corApert:"[">}
  TOKEN: {<corCierre:"]">}
  TOKEN: {<llaveAper:"{">}
  TOKEN: {<llaveCierre:"}">}
  TOKEN: {<punto:".">}
  TOKEN: {<flecha:"->">}
  TOKEN: {<coma:",">}
  TOKEN: {<ampersand:"&">}

  void Programa() : {PDeclaraciones() PInstrucciones()}
  void PDeclaraciones() : {LDecs() <separador>}
  void PDeclaraciones() : {{}}

  void LDecs() : {Dec() RLDecs()}
  void RLDecs() : {<pyc> Dec() RLDecs()}
  void RLDecs() : {{}}

  void Dec() : {<var> Tipo() <identificador>}
  void Dec() : {<type> Tipo() <identificador>}
  void Dec() : {<proc> <identificador> ParForm() Bloque()}
  void ParForm() : {<pApert> LParams() <pCierre>}

  void LParams() : {Param() RLParams()}
  void RLParams() : {<coma> Param() RLParams()}
  void RLParams() : {{}}
  void LParams() : {{}}

  void Param() : {Tipo() Referencia() <identificador>}
  void Referencia() : {<ampersand>}
  void Referencia() : {{}}
  void Bloque() : {<llaveAper> RBloque()}
  void RBloque() : {Programa() <llaveCierre>}
  void RBloque() : {<llaveCierre>}
  void Tipo() : {<int>}
  void Tipo() : {<real>}
  void Tipo() : {<bool>}
  void Tipo() : {<string>}
  void Tipo() : {<identificador>}
  void Tipo() : {<array> <corApert> <numeroEntero> <corCierre> <of> Tipo()}
  void Tipo() : {<record> <llaveAper> LCampos() <llaveCierre>}

  void LCampos() : {Campo() RLCampos()}
  void RLCampos() : {<pyc> Campo() RLCampos()}
  void RLCampos() : {{}}

  void Campo() : {Tipo() <identificador>}
  void Tipo() : {<pointer> Tipo()}

  void PInstrucciones() : {LIns()}

  void LIns() : {Ins() RLIns()}
  void RLIns() : {<pyc> Ins() RLIns()}
  void RLIns() : {{}}

  void Ins() : {E0() <igual> E0()}

  void Ins() : {InsIfThen() RInsIfThen()}
  void InsIfThen() : {<if> E0() <then> LInsV()}
  void RInsIfThen() : {<endif>}
  void RInsIfThen() : {<else> LInsV() <endif>}

  void Ins() : {<while> E0() <do> LInsV() endwhile>}

  void LInsV() : {Ins() RLInsV()}
  void RLInsV() : {<pyc> Ins() RLInsV()}
  void RLInsV() : {{}}
  void LInsV() : {{}}

  void Ins() : {<read> E0()}
  void Ins() : {<write> E0()}
  void Ins() : {<nl>}
  void Ins() : {<new> E0()}
  void Ins() : {<delete> E0()}
  void Ins() : {<call> <identificador> <pApert> LParamsReales() <pCierre>}

  void LParamsReales() : {E0() RLParamsReales()}
  void RLParamsReales() : {<coma> E0() RLParamsReales()}
  void RLParamsReales() : {{}}
  void LParamsReales() : {{}}

  void Ins() : {Bloque()}

  void E0() : {E1() RE0()}
  void RE0() : {<suma> E0()}
  void RE0() : {<resta> E1()}
  void RE0() : {{}}

  void E1() : {E2() RE1()}
  void RE1() : {OpN1() E2() RE1()}
  void RE1() : {{}}

  void E2() : {E3() RE2()}
  void RE2() : {OpN2() E3() RE2()}
  void RE2() : {{}}

  void E3() : {E4() RE3()}
  void RE3() : {OpN3() E4()}
  void RE3() : {{}}

  void E4() : {<resta> E5()}
  void E4() : {not E4()}
  void E4() : {E5()}

  void E5() : {E6() RE5()}
  void RE5() : {OpN5() RE5()}
  void RE5() : {{}}

  void E6() : {<multiplicacion> E6()}
  void E6() : {E7()}

  void E7() : {<identificador>}
  void E7() : {<numeroEntero>}
  void E7() : {<numeroReal>}
  void E7() : {<true>}
  void E7() : {<false>}
  void E7() : {<cadena>}
  void E7() : {<null>}
  void E7() : {<pApert> E0() <pCierre>}

  void OpN1() : {<and>}
  void OpN1() : {<or>}
  void OpN2() : {<menor>}
  void OpN2() : {<mayor>}
  void OpN2() : {<menorIgual>}
  void OpN2() : {<mayorIgual>}
  void OpN2() : {<igualdad>}
  void OpN2() : {<distinto>}
  void OpN3() : {<multiplicacion>}
  void OpN3() : {<division>}
  void OpN3() : {<modulo>}
  void OpN5() : {<corApert> E0() <corCierre>}
  void OpN5() : {<punto> <identificador>}
  void OpN5() : {<flecha> <identificador>}