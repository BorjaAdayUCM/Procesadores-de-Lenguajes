
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sat Apr 24 00:53:57 BST 2021
//----------------------------------------------------

package analizadorSintacticoAscendente;

import java_cup.runtime.*;
import analizadorLexico.AnalizadorLexicoTiny1;
import analizadorLexico.UnidadLexica;
import errores.GestionErroresTiny1;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sat Apr 24 00:53:57 BST 2021
  */
public class AnalizadorSintacticoTiny1Ascendente extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoTiny1Ascendente() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny1Ascendente(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoTiny1Ascendente(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\127\000\002\002\003\000\002\002\004\000\002\003" +
    "\004\000\002\004\004\000\002\004\002\000\002\005\005" +
    "\000\002\005\003\000\002\006\005\000\002\006\005\000" +
    "\002\006\006\000\002\007\005\000\002\010\005\000\002" +
    "\010\003\000\002\010\002\000\002\011\005\000\002\012" +
    "\003\000\002\012\002\000\002\013\005\000\002\014\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\010\000\002\014\006\000\002" +
    "\014\004\000\002\015\005\000\002\015\003\000\002\016" +
    "\004\000\002\017\003\000\002\020\005\000\002\020\003" +
    "\000\002\021\005\000\002\021\007\000\002\021\011\000" +
    "\002\021\007\000\002\021\004\000\002\021\004\000\002" +
    "\021\003\000\002\021\004\000\002\021\004\000\002\021" +
    "\007\000\002\021\003\000\002\022\005\000\002\022\003" +
    "\000\002\022\002\000\002\023\005\000\002\023\003\000" +
    "\002\023\002\000\002\024\005\000\002\024\005\000\002" +
    "\024\003\000\002\025\005\000\002\025\003\000\002\026" +
    "\005\000\002\026\003\000\002\027\005\000\002\027\003" +
    "\000\002\030\004\000\002\030\004\000\002\030\003\000" +
    "\002\031\004\000\002\031\003\000\002\032\004\000\002" +
    "\032\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\033\005\000\002\034\003\000" +
    "\002\034\003\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\036\003\000\002\036\003\000\002\036\003" +
    "\000\002\037\005\000\002\037\004\000\002\037\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\060\004\ufffd\005\ufffd\006\ufffd\007\ufffd\011" +
    "\ufffd\012\ufffd\025\ufffd\032\ufffd\046\ufffd\047\ufffd\050\ufffd" +
    "\051\ufffd\052\007\053\ufffd\057\ufffd\062\ufffd\067\ufffd\070" +
    "\ufffd\071\ufffd\072\ufffd\073\ufffd\074\004\075\013\001\002" +
    "\000\022\004\020\040\014\041\024\042\016\043\022\063" +
    "\021\064\017\066\023\001\002\000\004\002\001\001\002" +
    "\000\006\014\ufffb\027\ufffb\001\002\000\004\004\211\001" +
    "\002\000\006\014\206\027\207\001\002\000\004\002\205" +
    "\001\002\000\052\004\056\005\053\006\074\007\050\011" +
    "\047\012\065\025\045\032\044\046\054\047\102\050\060" +
    "\051\075\053\062\057\051\062\052\067\077\070\101\071" +
    "\046\072\067\073\103\001\002\000\022\004\020\040\014" +
    "\041\024\042\016\043\022\063\021\064\017\066\023\001" +
    "\002\000\006\004\uffef\037\uffef\001\002\000\004\004\043" +
    "\001\002\000\006\004\uffed\037\uffed\001\002\000\004\030" +
    "\036\001\002\000\006\004\uffeb\037\uffeb\001\002\000\004" +
    "\032\026\001\002\000\006\004\uffec\037\uffec\001\002\000" +
    "\022\004\020\040\014\041\024\042\016\043\022\063\021" +
    "\064\017\066\023\001\002\000\006\004\uffee\037\uffee\001" +
    "\002\000\006\004\uffe8\037\uffe8\001\002\000\022\004\020" +
    "\040\014\041\024\042\016\043\022\063\021\064\017\066" +
    "\023\001\002\000\004\004\035\001\002\000\006\027\033" +
    "\033\032\001\002\000\006\027\uffe6\033\uffe6\001\002\000" +
    "\006\004\uffe9\037\uffe9\001\002\000\022\004\020\040\014" +
    "\041\024\042\016\043\022\063\021\064\017\066\023\001" +
    "\002\000\006\027\uffe7\033\uffe7\001\002\000\006\027\uffe5" +
    "\033\uffe5\001\002\000\004\005\037\001\002\000\004\031" +
    "\040\001\002\000\004\065\041\001\002\000\022\004\020" +
    "\040\014\041\024\042\016\043\022\063\021\064\017\066" +
    "\023\001\002\000\006\004\uffea\037\uffea\001\002\000\006" +
    "\014\ufff9\027\ufff9\001\002\000\060\004\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\011\ufffd\012\ufffd\025\ufffd\032\ufffd\046\ufffd" +
    "\047\ufffd\050\ufffd\051\ufffd\052\007\053\ufffd\057\ufffd\062" +
    "\ufffd\067\ufffd\070\ufffd\071\ufffd\072\ufffd\073\ufffd\074\004" +
    "\075\013\001\002\000\030\004\056\005\053\006\074\007" +
    "\050\011\047\012\065\025\045\046\054\047\102\050\060" +
    "\051\075\001\002\000\030\004\056\005\053\006\074\007" +
    "\050\011\047\012\065\025\045\046\054\047\102\050\060" +
    "\051\075\001\002\000\024\004\056\005\053\006\074\007" +
    "\050\012\065\025\045\047\102\050\060\051\075\001\002" +
    "\000\072\002\uffbd\010\uffbd\011\uffbd\012\uffbd\013\uffbd\015" +
    "\uffbd\016\uffbd\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd" +
    "\024\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\033\uffbd\034" +
    "\uffbd\035\uffbd\036\uffbd\044\uffbd\045\uffbd\054\uffbd\055\uffbd" +
    "\056\uffbd\060\uffbd\061\uffbd\001\002\000\030\004\056\005" +
    "\053\006\074\007\050\011\047\012\065\025\045\046\054" +
    "\047\102\050\060\051\075\001\002\000\004\004\164\001" +
    "\002\000\072\002\uffbf\010\uffbf\011\uffbf\012\uffbf\013\uffbf" +
    "\015\uffbf\016\uffbf\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023" +
    "\uffbf\024\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\033\uffbf" +
    "\034\uffbf\035\uffbf\036\uffbf\044\uffbf\045\uffbf\054\uffbf\055" +
    "\uffbf\056\uffbf\060\uffbf\061\uffbf\001\002\000\030\004\056" +
    "\005\053\006\074\007\050\011\047\012\065\025\045\046" +
    "\054\047\102\050\060\051\075\001\002\000\072\002\uffc1" +
    "\010\uffc1\011\uffc1\012\uffc1\013\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1\024\uffc1\026\uffc1" +
    "\027\uffc1\030\uffc1\031\uffc1\033\uffc1\034\uffc1\035\uffc1\036" +
    "\uffc1\044\uffc1\045\uffc1\054\uffc1\055\uffc1\056\uffc1\060\uffc1" +
    "\061\uffc1\001\002\000\072\002\uffc0\010\uffc0\011\uffc0\012" +
    "\uffc0\013\uffc0\015\uffc0\016\uffc0\017\uffc0\020\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\026\uffc0\027\uffc0\030\uffc0\031" +
    "\uffc0\033\uffc0\034\uffc0\035\uffc0\036\uffc0\044\uffc0\045\uffc0" +
    "\054\uffc0\055\uffc0\056\uffc0\060\uffc0\061\uffc0\001\002\000" +
    "\072\002\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\015\uffc3" +
    "\016\uffc3\017\uffc3\020\uffc3\021\uffc3\022\uffc3\023\uffc3\024" +
    "\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\033\uffc3\034\uffc3" +
    "\035\uffc3\036\uffc3\044\uffc3\045\uffc3\054\uffc3\055\uffc3\056" +
    "\uffc3\060\uffc3\061\uffc3\001\002\000\072\002\uffbc\010\uffbc" +
    "\011\uffbc\012\uffbc\013\uffbc\015\uffbc\016\uffbc\017\uffbc\020" +
    "\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\026\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\033\uffbc\034\uffbc\035\uffbc\036\uffbc\044" +
    "\uffbc\045\uffbc\054\uffbc\055\uffbc\056\uffbc\060\uffbc\061\uffbc" +
    "\001\002\000\072\002\uffc5\010\uffc5\011\uffc5\012\uffc5\013" +
    "\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\021\uffc5\022\uffc5" +
    "\023\uffc5\024\uffc5\026\uffc5\027\uffc5\030\155\031\uffc5\033" +
    "\uffc5\034\156\035\uffc5\036\154\044\uffc5\045\uffc5\054\uffc5" +
    "\055\uffc5\056\uffc5\060\uffc5\061\uffc5\001\002\000\030\004" +
    "\056\005\053\006\074\007\050\011\047\012\065\025\045" +
    "\046\054\047\102\050\060\051\075\001\002\000\010\002" +
    "\uffe2\027\uffe2\033\uffe2\001\002\000\064\002\uffc8\010\uffc8" +
    "\011\uffc8\012\137\013\136\015\134\016\uffc8\017\uffc8\020" +
    "\uffc8\021\uffc8\022\uffc8\023\uffc8\024\uffc8\026\uffc8\027\uffc8" +
    "\031\uffc8\033\uffc8\035\uffc8\044\uffc8\045\uffc8\054\uffc8\055" +
    "\uffc8\056\uffc8\060\uffc8\061\uffc8\001\002\000\024\004\056" +
    "\005\053\006\074\007\050\012\065\025\045\047\102\050" +
    "\060\051\075\001\002\000\056\002\uffca\010\uffca\011\uffca" +
    "\016\uffca\017\uffca\020\uffca\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\026\uffca\027\uffca\031\uffca\033\uffca\035\uffca\044\uffca" +
    "\045\uffca\054\uffca\055\uffca\056\uffca\060\uffca\061\uffca\001" +
    "\002\000\030\004\056\005\053\006\074\007\050\011\047" +
    "\012\065\025\045\046\054\047\102\050\060\051\075\001" +
    "\002\000\056\002\uffcc\010\uffcc\011\uffcc\016\125\017\127" +
    "\020\121\021\122\022\126\023\uffcc\024\124\026\uffcc\027" +
    "\uffcc\031\uffcc\033\uffcc\035\uffcc\044\uffcc\045\uffcc\054\uffcc" +
    "\055\uffcc\056\uffcc\060\uffcc\061\uffcc\001\002\000\042\002" +
    "\uffce\010\112\011\115\023\uffce\026\uffce\027\uffce\031\uffce" +
    "\033\uffce\035\uffce\044\113\045\116\054\uffce\055\uffce\056" +
    "\uffce\060\uffce\061\uffce\001\002\000\004\023\110\001\002" +
    "\000\006\002\uffff\033\uffff\001\002\000\072\002\uffbe\010" +
    "\uffbe\011\uffbe\012\uffbe\013\uffbe\015\uffbe\016\uffbe\017\uffbe" +
    "\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\033\uffbe\034\uffbe\035\uffbe\036\uffbe" +
    "\044\uffbe\045\uffbe\054\uffbe\055\uffbe\056\uffbe\060\uffbe\061" +
    "\uffbe\001\002\000\072\002\uffbb\010\uffbb\011\uffbb\012\uffbb" +
    "\013\uffbb\015\uffbb\016\uffbb\017\uffbb\020\uffbb\021\uffbb\022" +
    "\uffbb\023\uffbb\024\uffbb\026\uffbb\027\uffbb\030\uffbb\031\uffbb" +
    "\033\uffbb\034\uffbb\035\uffbb\036\uffbb\044\uffbb\045\uffbb\054" +
    "\uffbb\055\uffbb\056\uffbb\060\uffbb\061\uffbb\001\002\000\010" +
    "\002\uffe4\027\106\033\uffe4\001\002\000\030\004\056\005" +
    "\053\006\074\007\050\011\047\012\065\025\045\046\054" +
    "\047\102\050\060\051\075\001\002\000\016\002\uffd7\027" +
    "\uffd7\033\uffd7\055\uffd7\056\uffd7\061\uffd7\001\002\000\030" +
    "\004\056\005\053\006\074\007\050\011\047\012\065\025" +
    "\045\046\054\047\102\050\060\051\075\001\002\000\072" +
    "\002\uffba\010\uffba\011\uffba\012\uffba\013\uffba\015\uffba\016" +
    "\uffba\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba" +
    "\026\uffba\027\uffba\030\uffba\031\uffba\033\uffba\034\uffba\035" +
    "\uffba\036\uffba\044\uffba\045\uffba\054\uffba\055\uffba\056\uffba" +
    "\060\uffba\061\uffba\001\002\000\016\002\uffdb\027\uffdb\033" +
    "\uffdb\055\uffdb\056\uffdb\061\uffdb\001\002\000\016\002\uffd9" +
    "\027\uffd9\033\uffd9\055\uffd9\056\uffd9\061\uffd9\001\002\000" +
    "\016\002\uffda\027\uffda\033\uffda\055\uffda\056\uffda\061\uffda" +
    "\001\002\000\052\004\056\005\053\006\074\007\050\011" +
    "\047\012\065\025\045\032\044\046\054\047\102\050\060" +
    "\051\075\053\062\057\051\062\052\067\077\070\101\071" +
    "\046\072\067\073\103\001\002\000\010\002\uffe3\027\uffe3" +
    "\033\uffe3\001\002\000\030\004\056\005\053\006\074\007" +
    "\050\011\047\012\065\025\045\046\054\047\102\050\060" +
    "\051\075\001\002\000\016\002\uffe1\027\uffe1\033\uffe1\055" +
    "\uffe1\056\uffe1\061\uffe1\001\002\000\030\004\056\005\053" +
    "\006\074\007\050\011\047\012\065\025\045\046\054\047" +
    "\102\050\060\051\075\001\002\000\030\004\uffb8\005\uffb8" +
    "\006\uffb8\007\uffb8\011\uffb8\012\uffb8\025\uffb8\046\uffb8\047" +
    "\uffb8\050\uffb8\051\uffb8\001\002\000\030\004\056\005\053" +
    "\006\074\007\050\011\047\012\065\025\045\046\054\047" +
    "\102\050\060\051\075\001\002\000\030\004\056\005\053" +
    "\006\074\007\050\011\047\012\065\025\045\046\054\047" +
    "\102\050\060\051\075\001\002\000\030\004\uffb7\005\uffb7" +
    "\006\uffb7\007\uffb7\011\uffb7\012\uffb7\025\uffb7\046\uffb7\047" +
    "\uffb7\050\uffb7\051\uffb7\001\002\000\036\002\uffcf\023\uffcf" +
    "\026\uffcf\027\uffcf\031\uffcf\033\uffcf\035\uffcf\044\113\045" +
    "\116\054\uffcf\055\uffcf\056\uffcf\060\uffcf\061\uffcf\001\002" +
    "\000\056\002\uffcd\010\uffcd\011\uffcd\016\125\017\127\020" +
    "\121\021\122\022\126\023\uffcd\024\124\026\uffcd\027\uffcd" +
    "\031\uffcd\033\uffcd\035\uffcd\044\uffcd\045\uffcd\054\uffcd\055" +
    "\uffcd\056\uffcd\060\uffcd\061\uffcd\001\002\000\030\004\uffb4" +
    "\005\uffb4\006\uffb4\007\uffb4\011\uffb4\012\uffb4\025\uffb4\046" +
    "\uffb4\047\uffb4\050\uffb4\051\uffb4\001\002\000\030\004\uffb3" +
    "\005\uffb3\006\uffb3\007\uffb3\011\uffb3\012\uffb3\025\uffb3\046" +
    "\uffb3\047\uffb3\050\uffb3\051\uffb3\001\002\000\030\004\056" +
    "\005\053\006\074\007\050\011\047\012\065\025\045\046" +
    "\054\047\102\050\060\051\075\001\002\000\030\004\uffb1" +
    "\005\uffb1\006\uffb1\007\uffb1\011\uffb1\012\uffb1\025\uffb1\046" +
    "\uffb1\047\uffb1\050\uffb1\051\uffb1\001\002\000\030\004\uffb6" +
    "\005\uffb6\006\uffb6\007\uffb6\011\uffb6\012\uffb6\025\uffb6\046" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\001\002\000\030\004\uffb2" +
    "\005\uffb2\006\uffb2\007\uffb2\011\uffb2\012\uffb2\025\uffb2\046" +
    "\uffb2\047\uffb2\050\uffb2\051\uffb2\001\002\000\030\004\uffb5" +
    "\005\uffb5\006\uffb5\007\uffb5\011\uffb5\012\uffb5\025\uffb5\046" +
    "\uffb5\047\uffb5\050\uffb5\051\uffb5\001\002\000\056\002\uffcb" +
    "\010\uffcb\011\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022" +
    "\uffcb\023\uffcb\024\uffcb\026\uffcb\027\uffcb\031\uffcb\033\uffcb" +
    "\035\uffcb\044\uffcb\045\uffcb\054\uffcb\055\uffcb\056\uffcb\060" +
    "\uffcb\061\uffcb\001\002\000\032\002\uffd0\023\uffd0\026\uffd0" +
    "\027\uffd0\031\uffd0\033\uffd0\035\uffd0\054\uffd0\055\uffd0\056" +
    "\uffd0\060\uffd0\061\uffd0\001\002\000\016\002\uffdc\027\uffdc" +
    "\033\uffdc\055\uffdc\056\uffdc\061\uffdc\001\002\000\072\002" +
    "\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2\015\uffc2\016\uffc2" +
    "\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\026" +
    "\uffc2\027\uffc2\030\uffc2\031\uffc2\033\uffc2\034\uffc2\035\uffc2" +
    "\036\uffc2\044\uffc2\045\uffc2\054\uffc2\055\uffc2\056\uffc2\060" +
    "\uffc2\061\uffc2\001\002\000\030\004\uffae\005\uffae\006\uffae" +
    "\007\uffae\011\uffae\012\uffae\025\uffae\046\uffae\047\uffae\050" +
    "\uffae\051\uffae\001\002\000\030\004\056\005\053\006\074" +
    "\007\050\011\047\012\065\025\045\046\054\047\102\050" +
    "\060\051\075\001\002\000\030\004\uffaf\005\uffaf\006\uffaf" +
    "\007\uffaf\011\uffaf\012\uffaf\025\uffaf\046\uffaf\047\uffaf\050" +
    "\uffaf\051\uffaf\001\002\000\030\004\uffb0\005\uffb0\006\uffb0" +
    "\007\uffb0\011\uffb0\012\uffb0\025\uffb0\046\uffb0\047\uffb0\050" +
    "\uffb0\051\uffb0\001\002\000\056\002\uffc9\010\uffc9\011\uffc9" +
    "\016\uffc9\017\uffc9\020\uffc9\021\uffc9\022\uffc9\023\uffc9\024" +
    "\uffc9\026\uffc9\027\uffc9\031\uffc9\033\uffc9\035\uffc9\044\uffc9" +
    "\045\uffc9\054\uffc9\055\uffc9\056\uffc9\060\uffc9\061\uffc9\001" +
    "\002\000\004\054\142\001\002\000\060\004\056\005\053" +
    "\006\074\007\050\011\047\012\065\025\045\027\uffd4\032" +
    "\044\046\054\047\102\050\060\051\075\053\062\055\uffd4" +
    "\056\uffd4\057\051\062\052\067\077\070\101\071\046\072" +
    "\067\073\103\001\002\000\012\027\uffd5\055\uffd5\056\uffd5" +
    "\061\uffd5\001\002\000\010\027\147\055\145\056\146\001" +
    "\002\000\056\004\056\005\053\006\074\007\050\011\047" +
    "\012\065\025\045\027\uffd4\032\044\046\054\047\102\050" +
    "\060\051\075\053\062\056\uffd4\057\051\062\052\067\077" +
    "\070\101\071\046\072\067\073\103\001\002\000\016\002" +
    "\uffe0\027\uffe0\033\uffe0\055\uffe0\056\uffe0\061\uffe0\001\002" +
    "\000\052\004\056\005\053\006\074\007\050\011\047\012" +
    "\065\025\045\032\044\046\054\047\102\050\060\051\075" +
    "\053\062\057\051\062\052\067\077\070\101\071\046\072" +
    "\067\073\103\001\002\000\012\027\uffd6\055\uffd6\056\uffd6" +
    "\061\uffd6\001\002\000\006\027\147\056\152\001\002\000" +
    "\016\002\uffdf\027\uffdf\033\uffdf\055\uffdf\056\uffdf\061\uffdf" +
    "\001\002\000\072\002\uffc4\010\uffc4\011\uffc4\012\uffc4\013" +
    "\uffc4\015\uffc4\016\uffc4\017\uffc4\020\uffc4\021\uffc4\022\uffc4" +
    "\023\uffc4\024\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\033" +
    "\uffc4\034\uffc4\035\uffc4\036\uffc4\044\uffc4\045\uffc4\054\uffc4" +
    "\055\uffc4\056\uffc4\060\uffc4\061\uffc4\001\002\000\004\004" +
    "\162\001\002\000\030\004\056\005\053\006\074\007\050" +
    "\011\047\012\065\025\045\046\054\047\102\050\060\051" +
    "\075\001\002\000\004\004\157\001\002\000\072\002\uffac" +
    "\010\uffac\011\uffac\012\uffac\013\uffac\015\uffac\016\uffac\017" +
    "\uffac\020\uffac\021\uffac\022\uffac\023\uffac\024\uffac\026\uffac" +
    "\027\uffac\030\uffac\031\uffac\033\uffac\034\uffac\035\uffac\036" +
    "\uffac\044\uffac\045\uffac\054\uffac\055\uffac\056\uffac\060\uffac" +
    "\061\uffac\001\002\000\004\031\161\001\002\000\072\002" +
    "\uffad\010\uffad\011\uffad\012\uffad\013\uffad\015\uffad\016\uffad" +
    "\017\uffad\020\uffad\021\uffad\022\uffad\023\uffad\024\uffad\026" +
    "\uffad\027\uffad\030\uffad\031\uffad\033\uffad\034\uffad\035\uffad" +
    "\036\uffad\044\uffad\045\uffad\054\uffad\055\uffad\056\uffad\060" +
    "\uffad\061\uffad\001\002\000\072\002\uffab\010\uffab\011\uffab" +
    "\012\uffab\013\uffab\015\uffab\016\uffab\017\uffab\020\uffab\021" +
    "\uffab\022\uffab\023\uffab\024\uffab\026\uffab\027\uffab\030\uffab" +
    "\031\uffab\033\uffab\034\uffab\035\uffab\036\uffab\044\uffab\045" +
    "\uffab\054\uffab\055\uffab\056\uffab\060\uffab\061\uffab\001\002" +
    "\000\064\002\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\015" +
    "\uffc6\016\uffc6\017\uffc6\020\uffc6\021\uffc6\022\uffc6\023\uffc6" +
    "\024\uffc6\026\uffc6\027\uffc6\031\uffc6\033\uffc6\035\uffc6\044" +
    "\uffc6\045\uffc6\054\uffc6\055\uffc6\056\uffc6\060\uffc6\061\uffc6" +
    "\001\002\000\004\025\165\001\002\000\034\004\056\005" +
    "\053\006\074\007\050\011\047\012\065\025\045\026\uffd1" +
    "\035\uffd1\046\054\047\102\050\060\051\075\001\002\000" +
    "\006\026\171\035\170\001\002\000\006\026\uffd2\035\uffd2" +
    "\001\002\000\030\004\056\005\053\006\074\007\050\011" +
    "\047\012\065\025\045\046\054\047\102\050\060\051\075" +
    "\001\002\000\016\002\uffd8\027\uffd8\033\uffd8\055\uffd8\056" +
    "\uffd8\061\uffd8\001\002\000\006\026\uffd3\035\uffd3\001\002" +
    "\000\004\060\174\001\002\000\056\004\056\005\053\006" +
    "\074\007\050\011\047\012\065\025\045\027\uffd4\032\044" +
    "\046\054\047\102\050\060\051\075\053\062\057\051\061" +
    "\uffd4\062\052\067\077\070\101\071\046\072\067\073\103" +
    "\001\002\000\006\027\147\061\176\001\002\000\016\002" +
    "\uffde\027\uffde\033\uffde\055\uffde\056\uffde\061\uffde\001\002" +
    "\000\072\002\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\015" +
    "\uffc7\016\uffc7\017\uffc7\020\uffc7\021\uffc7\022\uffc7\023\uffc7" +
    "\024\uffc7\026\uffc7\027\uffc7\030\155\031\uffc7\033\uffc7\034" +
    "\156\035\uffc7\036\154\044\uffc7\045\uffc7\054\uffc7\055\uffc7" +
    "\056\uffc7\060\uffc7\061\uffc7\001\002\000\016\002\uffdd\027" +
    "\uffdd\033\uffdd\055\uffdd\056\uffdd\061\uffdd\001\002\000\004" +
    "\026\202\001\002\000\072\002\uffb9\010\uffb9\011\uffb9\012" +
    "\uffb9\013\uffb9\015\uffb9\016\uffb9\017\uffb9\020\uffb9\021\uffb9" +
    "\022\uffb9\023\uffb9\024\uffb9\026\uffb9\027\uffb9\030\uffb9\031" +
    "\uffb9\033\uffb9\034\uffb9\035\uffb9\036\uffb9\044\uffb9\045\uffb9" +
    "\054\uffb9\055\uffb9\056\uffb9\060\uffb9\061\uffb9\001\002\000" +
    "\004\033\204\001\002\000\020\002\ufff0\014\ufff0\027\ufff0" +
    "\033\ufff0\055\ufff0\056\ufff0\061\ufff0\001\002\000\004\002" +
    "\000\001\002\000\052\004\ufffe\005\ufffe\006\ufffe\007\ufffe" +
    "\011\ufffe\012\ufffe\025\ufffe\032\ufffe\046\ufffe\047\ufffe\050" +
    "\ufffe\051\ufffe\053\ufffe\057\ufffe\062\ufffe\067\ufffe\070\ufffe" +
    "\071\ufffe\072\ufffe\073\ufffe\001\002\000\010\052\007\074" +
    "\004\075\013\001\002\000\006\014\ufffc\027\ufffc\001\002" +
    "\000\004\025\213\001\002\000\004\032\044\001\002\000" +
    "\026\004\020\026\ufff4\035\ufff4\040\014\041\024\042\016" +
    "\043\022\063\021\064\017\066\023\001\002\000\006\026" +
    "\ufff5\035\ufff5\001\002\000\006\004\ufff1\037\222\001\002" +
    "\000\006\026\220\035\217\001\002\000\022\004\020\040" +
    "\014\041\024\042\016\043\022\063\021\064\017\066\023" +
    "\001\002\000\004\032\ufff7\001\002\000\006\026\ufff6\035" +
    "\ufff6\001\002\000\004\004\ufff2\001\002\000\004\004\224" +
    "\001\002\000\006\026\ufff3\035\ufff3\001\002\000\006\014" +
    "\ufff8\027\ufff8\001\002\000\004\004\227\001\002\000\006" +
    "\014\ufffa\027\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\225\000\014\002\010\003\004\004\011\005\007\006" +
    "\005\001\001\000\004\014\225\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\032\013\077\017\072\020\075\021\062" +
    "\024\071\025\070\026\067\027\065\030\063\031\060\032" +
    "\056\033\054\001\001\000\004\014\014\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\014\026\015\027\016\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\014\026\016\033\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\014\041\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\202\004\011\005\007\006" +
    "\005\001\001\000\022\024\200\025\070\026\067\027\065" +
    "\030\063\031\060\032\056\033\054\001\001\000\022\024" +
    "\177\025\070\026\067\027\065\030\063\031\060\032\056" +
    "\033\054\001\001\000\010\031\176\032\056\033\054\001" +
    "\001\000\002\001\001\000\022\024\172\025\070\026\067" +
    "\027\065\030\063\031\060\032\056\033\054\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\030\162\031\060" +
    "\032\056\033\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\152" +
    "\001\001\000\022\024\140\025\070\026\067\027\065\030" +
    "\063\031\060\032\056\033\054\001\001\000\002\001\001" +
    "\000\004\036\134\001\001\000\006\032\132\033\054\001" +
    "\001\000\002\001\001\000\022\024\131\025\070\026\067" +
    "\027\065\030\063\031\060\032\056\033\054\001\001\000" +
    "\004\035\122\001\001\000\004\034\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\024\104\025\070\026\067" +
    "\027\065\030\063\031\060\032\056\033\054\001\001\000" +
    "\002\001\001\000\022\024\103\025\070\026\067\027\065" +
    "\030\063\031\060\032\056\033\054\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\013\077\021\106\024\071\025\070\026\067\027" +
    "\065\030\063\031\060\032\056\033\054\001\001\000\002" +
    "\001\001\000\022\024\110\025\070\026\067\027\065\030" +
    "\063\031\060\032\056\033\054\001\001\000\002\001\001" +
    "\000\022\024\130\025\070\026\067\027\065\030\063\031" +
    "\060\032\056\033\054\001\001\000\002\001\001\000\016" +
    "\026\117\027\065\030\063\031\060\032\056\033\054\001" +
    "\001\000\020\025\116\026\067\027\065\030\063\031\060" +
    "\032\056\033\054\001\001\000\002\001\001\000\004\034" +
    "\113\001\001\000\004\035\122\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\027\127\030\063\031\060\032" +
    "\056\033\054\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\030\137\031\060\032\056\033\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\030\013\077\021\142\022\143\024" +
    "\071\025\070\026\067\027\065\030\063\031\060\032\056" +
    "\033\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\013\077\021\142\022\150\024\071\025\070\026\067" +
    "\027\065\030\063\031\060\032\056\033\054\001\001\000" +
    "\002\001\001\000\026\013\077\021\147\024\071\025\070" +
    "\026\067\027\065\030\063\031\060\032\056\033\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\024\157\025" +
    "\070\026\067\027\065\030\063\031\060\032\056\033\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\023\165\024\166\025\070\026" +
    "\067\027\065\030\063\031\060\032\056\033\054\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\024\171\025" +
    "\070\026\067\027\065\030\063\031\060\032\056\033\054" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\030\013\077\021\142\022\174\024\071\025\070" +
    "\026\067\027\065\030\063\031\060\032\056\033\054\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\037\152" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\207\001\001\000\002\001" +
    "\001\000\004\007\211\001\001\000\004\013\224\001\001" +
    "\000\010\010\215\011\213\014\214\001\001\000\002\001" +
    "\001\000\004\012\222\001\001\000\002\001\001\000\006" +
    "\011\220\014\214\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoTiny1Ascendente$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoTiny1Ascendente$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoTiny1Ascendente$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny1();
   AnalizadorLexicoTiny1 analizadorLexico = (AnalizadorLexicoTiny1)getScanner();
   analizadorLexico.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny1 errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoTiny1Ascendente$actions {
  private final AnalizadorSintacticoTiny1Ascendente parser;

  /** Constructor */
  CUP$AnalizadorSintacticoTiny1Ascendente$actions(AnalizadorSintacticoTiny1Ascendente parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny1Ascendente$do_action_part00000000(
    int                        CUP$AnalizadorSintacticoTiny1Ascendente$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny1Ascendente$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny1Ascendente$stack,
    int                        CUP$AnalizadorSintacticoTiny1Ascendente$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny1Ascendente$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoTiny1Ascendente$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Sp ::= Programa 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Sp",0, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Sp EOF 
            {
              Object RESULT =null;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoTiny1Ascendente$stack.elementAt(CUP$AnalizadorSintacticoTiny1Ascendente$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoTiny1Ascendente$parser.done_parsing();
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= PDeclaraciones PInstrucciones 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Programa",1, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PDeclaraciones ::= LDecs SEP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("PDeclaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PDeclaraciones ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("PDeclaraciones",2, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LDecs ::= LDecs PYC Dec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("LDecs",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LDecs ::= Dec 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("LDecs",3, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Dec ::= VAR Tipo IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Dec",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Dec ::= TYPE Tipo IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Dec",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Dec ::= PROC IDEN ParForm Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Dec",4, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ParForm ::= PAPER LParams PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("ParForm",5, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LParams ::= LParams COMA Param 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("LParams",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LParams ::= Param 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("LParams",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LParams ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("LParams",6, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Param ::= Tipo Referencia IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Param",7, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Referencia ::= AMPERSAND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Referencia",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Referencia ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Referencia",8, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Bloque ::= LLAVEAPER Programa LLAVECIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Bloque",9, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // Tipo ::= INT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Tipo",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Tipo ::= REAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Tipo",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tipo ::= BOOL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Tipo",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tipo ::= STRING 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Tipo",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Tipo ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Tipo",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Tipo ::= ARRAY CORAPER NUMENT CORCIERRE OF Tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Tipo",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo ::= RECORD LLAVEAPER LCampos LLAVECIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Tipo",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Tipo ::= POINTER Tipo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Tipo",10, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LCampos ::= LCampos PYC Campo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("LCampos",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LCampos ::= Campo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("LCampos",11, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Campo ::= Tipo IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Campo",12, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PInstrucciones ::= LIns 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("PInstrucciones",13, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LIns ::= LIns PYC Ins 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("LIns",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LIns ::= Ins 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("LIns",14, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Ins ::= E0 IGUAL E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Ins",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Ins ::= IF E0 THEN LInsV ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Ins",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Ins ::= IF E0 THEN LInsV ELSE LInsV ENDIF 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Ins",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Ins ::= WHILE E0 DO LInsV ENDWHILE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Ins",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Ins ::= READ E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Ins",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Ins ::= WRITE E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Ins",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Ins ::= NL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Ins",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Ins ::= NEW E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Ins",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Ins ::= DELETE E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Ins",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Ins ::= CALL IDEN PAPER LParamsReales PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Ins",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Ins ::= Bloque 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("Ins",15, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LInsV ::= LInsV PYC Ins 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("LInsV",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LInsV ::= Ins 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("LInsV",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LInsV ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("LInsV",16, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LParamsReales ::= LParamsReales COMA E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("LParamsReales",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LParamsReales ::= E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("LParamsReales",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LParamsReales ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("LParamsReales",17, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E0 ::= E1 MAS E0 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("E0",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E0 ::= E1 MENOS E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("E0",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E0 ::= E1 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("E0",18, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E1 ::= E1 OpN1 E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("E1",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E1 ::= E2 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("E1",19, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E2 ::= E2 OpN2 E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("E2",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E2 ::= E3 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("E2",20, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E3 ::= E4 OpN3 E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("E3",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E3 ::= E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("E3",21, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E4 ::= MENOS E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("E4",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E4 ::= NOT E4 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("E4",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E4 ::= E5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("E4",22, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E5 ::= E5 OpN5 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("E5",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E5 ::= E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("E5",23, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E6 ::= POR E6 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("E6",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E6 ::= E7 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("E6",24, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E7 ::= IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("E7",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E7 ::= NUMENT 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("E7",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E7 ::= NUMREAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("E7",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E7 ::= CADENA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("E7",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E7 ::= TRUE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("E7",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E7 ::= FALSE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("E7",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E7 ::= NULL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("E7",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E7 ::= PAPER E0 PCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("E7",25, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // OpN1 ::= AND 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("OpN1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // OpN1 ::= OR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("OpN1",26, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OpN2 ::= MENOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("OpN2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OpN2 ::= MAYOR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("OpN2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OpN2 ::= MENORIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("OpN2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OpN2 ::= MAYORIGUAL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("OpN2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OpN2 ::= IGUALDAD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("OpN2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OpN2 ::= DISTINTO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("OpN2",27, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OpN3 ::= POR 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("OpN3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OpN3 ::= DIV 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("OpN3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OpN3 ::= MOD 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("OpN3",28, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OpN5 ::= CORAPER E0 CORCIERRE 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("OpN5",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OpN5 ::= PUNTO IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("OpN5",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // OpN5 ::= FLECHA IDEN 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoTiny1Ascendente$result = parser.getSymbolFactory().newSymbol("OpN5",29, RESULT);
            }
          return CUP$AnalizadorSintacticoTiny1Ascendente$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$AnalizadorSintacticoTiny1Ascendente$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoTiny1Ascendente$do_action(
    int                        CUP$AnalizadorSintacticoTiny1Ascendente$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoTiny1Ascendente$parser,
    java.util.Stack            CUP$AnalizadorSintacticoTiny1Ascendente$stack,
    int                        CUP$AnalizadorSintacticoTiny1Ascendente$top)
    throws java.lang.Exception
    {
              return CUP$AnalizadorSintacticoTiny1Ascendente$do_action_part00000000(
                               CUP$AnalizadorSintacticoTiny1Ascendente$act_num,
                               CUP$AnalizadorSintacticoTiny1Ascendente$parser,
                               CUP$AnalizadorSintacticoTiny1Ascendente$stack,
                               CUP$AnalizadorSintacticoTiny1Ascendente$top);
    }
}

