package procesamientos;

import analizadorSintactico.AnalizadorSintacticoTiny1.*;

public interface Procesamiento {
	void procesa(Suma suma);
	void procesa(Resta resta);
	void procesa(And and);
	void procesa(Or or);
	void procesa(Menor menor);
	void procesa(Mayor mayor);
	void procesa(Menor_igual menor_igual);
	void procesa(Mayor_igual mayor_igual);
	void procesa(Igualdad igualdad);
	void procesa(Distinto distinto);
	void procesa(Mul mul);
	void procesa(Div div);
	void procesa(Mod mod);
	void procesa(Menos menos);
	void procesa(Not not);
	void procesa(NumEnt numEnt);
	void procesa(NumReal numReal);
	void procesa(Identificador identificador);
	void procesa(True true1);
	void procesa(False false1);
	void procesa(Tipo_int tipo_int);
	void procesa(Tipo_bool tipo_bool);
	void procesa(Tipo_real tipo_real);
	void procesa(DecVar decVar);
	void procesa(DecType decType);
	void procesa(DecProc decProc);
	void procesa(LDecs_1 lDecs_1);
	void procesa(LDecs_muchas lDecs_muchas);
	void procesa(LIns_1 lIns_1);
	void procesa(LIns_muchas lIns_muchas);
	void procesa(LInsV_1 lInsV_1);
	void procesa(LInsV_muchas lInsV_muchas);
	void procesa(InsAsignacion insAsignacion);
	void procesa(InsRead insRead);
	void procesa(InsWrite insWrite);
	void procesa(InsNew insNew);
	void procesa(InsDelete insDelete);
	void procesa(InsNL insNL);
	void procesa(InsBloque insBloque);
	void procesa(InsIf insIf);
	void procesa(InsIfElse insIfElse);
	void procesa(InsWhile insWhile);
	void procesa(LParams_1 lParams_1);
	void procesa(LParams_muchos lParams_muchos);
	void procesa(Param param);
	void procesa(LParamsReales_1 lParamsReales_1);
	void procesa(LParamsReales_muchos lParamsReales_muchos);
	void procesa(Referencia referencia);
	void procesa(Programa programa);
	void procesa(Index index);
	void procesa(AccessRegPunto accessRegPunto);
	void procesa(AccessRegFlecha accessRegFlecha);
	void procesa(Indireccion indireccion);
	void procesa(Cadena cadena);
	void procesa(InsCall insCall);
	void procesa(Null null1);
	void procesa(Tipo_string tipo_string);
	void procesa(Tipo_id tipo_id);
	void procesa(Tipo_array tipo_array);
	void procesa(Tipo_pointer tipo_pointer);
	void procesa(Campo campo);
	void procesa(LCampos_1 lCampos_1);
	void procesa(LCampos_muchos lCampos_muchos);
	void procesa(Tipo_record tipo_record);
	void procesa(Bloque bloque);
}