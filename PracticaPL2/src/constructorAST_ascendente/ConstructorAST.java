
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Fri May 21 02:54:45 BST 2021
//----------------------------------------------------

package constructorAST_ascendente;

import java_cup.runtime.*;
import semops.SemOps;
import analizadorSintactico.AnalizadorSintacticoTiny1.*;
import errores.GestionErroresTiny1;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Fri May 21 02:54:45 BST 2021
  */
public class ConstructorAST extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorAST() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\126\000\002\002\005\000\002\002\004\000\002\002" +
    "\003\000\002\004\005\000\002\004\003\000\002\004\002" +
    "\000\002\005\005\000\002\005\005\000\002\005\006\000" +
    "\002\007\005\000\002\006\005\000\002\006\003\000\002" +
    "\006\002\000\002\010\005\000\002\011\003\000\002\011" +
    "\002\000\002\012\005\000\002\003\003\000\002\003\002" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\013\003\000\002\013\010\000\002" +
    "\013\006\000\002\013\004\000\002\014\005\000\002\014" +
    "\003\000\002\015\004\000\002\016\005\000\002\016\003" +
    "\000\002\017\005\000\002\017\007\000\002\017\011\000" +
    "\002\017\007\000\002\017\004\000\002\017\004\000\002" +
    "\017\003\000\002\017\004\000\002\017\004\000\002\017" +
    "\007\000\002\017\003\000\002\020\005\000\002\020\003" +
    "\000\002\020\002\000\002\021\005\000\002\021\003\000" +
    "\002\021\002\000\002\022\005\000\002\022\005\000\002" +
    "\022\003\000\002\023\005\000\002\023\003\000\002\024" +
    "\005\000\002\024\003\000\002\025\005\000\002\025\003" +
    "\000\002\026\004\000\002\026\004\000\002\026\003\000" +
    "\002\027\006\000\002\027\005\000\002\027\005\000\002" +
    "\027\003\000\002\030\004\000\002\030\003\000\002\031" +
    "\003\000\002\031\003\000\002\031\003\000\002\031\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\005\000\002\032\003\000\002\032\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\064\005\023\006\005\010\ufffc\021\007\023" +
    "\ufffc\026\004\042\013\043\024\044\020\045\040\046\035" +
    "\047\017\053\034\056\015\063\021\064\010\065\031\066" +
    "\011\067\032\070\046\071\014\072\033\073\012\074\027" +
    "\075\022\001\002\000\066\005\023\006\005\010\ufffc\021" +
    "\007\023\ufffc\026\004\027\uffef\042\013\043\024\044\020" +
    "\045\040\046\035\047\017\053\034\056\015\063\021\064" +
    "\010\065\031\066\011\067\032\070\046\071\014\072\033" +
    "\073\012\074\027\075\022\001\002\000\024\006\005\021" +
    "\007\043\024\044\020\045\040\072\033\073\012\074\027" +
    "\075\022\001\002\000\006\010\ufffd\023\ufffd\001\002\000" +
    "\030\005\023\006\005\021\007\042\013\043\024\044\020" +
    "\045\040\072\033\073\012\074\027\075\022\001\002\000" +
    "\030\005\023\006\005\021\007\042\013\043\024\044\020" +
    "\045\040\072\033\073\012\074\027\075\022\001\002\000" +
    "\030\005\023\006\005\021\007\042\013\043\024\044\020" +
    "\045\040\072\033\073\012\074\027\075\022\001\002\000" +
    "\072\002\uffbd\004\uffbd\005\uffbd\006\uffbd\007\uffbd\011\uffbd" +
    "\012\uffbd\013\uffbd\014\uffbd\015\uffbd\016\uffbd\017\uffbd\020" +
    "\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\027\uffbd\030\uffbd" +
    "\031\uffbd\032\uffbd\040\uffbd\041\uffbd\050\uffbd\051\uffbd\052" +
    "\uffbd\054\uffbd\055\uffbd\001\002\000\030\005\023\006\005" +
    "\021\007\042\013\043\024\044\020\045\040\072\033\073" +
    "\012\074\027\075\022\001\002\000\022\034\073\035\103" +
    "\036\075\037\101\057\100\060\076\062\102\072\077\001" +
    "\002\000\004\072\204\001\002\000\010\002\uffe2\023\uffe2" +
    "\027\uffe2\001\002\000\030\005\023\006\005\021\007\042" +
    "\013\043\024\044\020\045\040\072\033\073\012\074\027" +
    "\075\022\001\002\000\072\002\uffba\004\uffba\005\uffba\006" +
    "\uffba\007\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba" +
    "\016\uffba\017\uffba\020\uffba\022\uffba\023\uffba\024\uffba\025" +
    "\uffba\027\uffba\030\uffba\031\uffba\032\uffba\040\uffba\041\uffba" +
    "\050\uffba\051\uffba\052\uffba\054\uffba\055\uffba\001\002\000" +
    "\030\005\023\006\005\021\007\042\013\043\024\044\020" +
    "\045\040\072\033\073\012\074\027\075\022\001\002\000" +
    "\072\002\uffbb\004\uffbb\005\uffbb\006\uffbb\007\uffbb\011\uffbb" +
    "\012\uffbb\013\uffbb\014\uffbb\015\uffbb\016\uffbb\017\uffbb\020" +
    "\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\027\uffbb\030\uffbb" +
    "\031\uffbb\032\uffbb\040\uffbb\041\uffbb\050\uffbb\051\uffbb\052" +
    "\uffbb\054\uffbb\055\uffbb\001\002\000\024\006\005\021\007" +
    "\043\024\044\020\045\040\072\033\073\012\074\027\075" +
    "\022\001\002\000\072\002\uffb8\004\uffb8\005\uffb8\006\uffb8" +
    "\007\uffb8\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8\016" +
    "\uffb8\017\uffb8\020\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\032\uffb8\040\uffb8\041\uffb8\050" +
    "\uffb8\051\uffb8\052\uffb8\054\uffb8\055\uffb8\001\002\000\004" +
    "\002\172\001\002\000\010\002\uffff\023\143\027\uffff\001" +
    "\002\000\072\002\uffbc\004\uffbc\005\uffbc\006\uffbc\007\uffbc" +
    "\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\016\uffbc\017" +
    "\uffbc\020\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\027\uffbc" +
    "\030\uffbc\031\uffbc\032\uffbc\040\uffbc\041\uffbc\050\uffbc\051" +
    "\uffbc\052\uffbc\054\uffbc\055\uffbc\001\002\000\016\002\uffd7" +
    "\023\uffd7\027\uffd7\051\uffd7\052\uffd7\055\uffd7\001\002\000" +
    "\030\005\023\006\005\021\007\042\013\043\024\044\020" +
    "\045\040\072\033\073\012\074\027\075\022\001\002\000" +
    "\016\002\uffdb\023\uffdb\027\uffdb\051\uffdb\052\uffdb\055\uffdb" +
    "\001\002\000\072\002\uffbe\004\uffbe\005\uffbe\006\uffbe\007" +
    "\uffbe\011\uffbe\012\uffbe\013\uffbe\014\uffbe\015\uffbe\016\uffbe" +
    "\017\uffbe\020\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\032\uffbe\040\uffbe\041\uffbe\050\uffbe" +
    "\051\uffbe\052\uffbe\054\uffbe\055\uffbe\001\002\000\030\005" +
    "\023\006\005\021\007\042\013\043\024\044\020\045\040" +
    "\072\033\073\012\074\027\075\022\001\002\000\004\072" +
    "\145\001\002\000\072\002\uffbf\004\uffbf\005\uffbf\006\uffbf" +
    "\007\uffbf\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\016" +
    "\uffbf\017\uffbf\020\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf" +
    "\027\uffbf\030\uffbf\031\uffbf\032\uffbf\040\uffbf\041\uffbf\050" +
    "\uffbf\051\uffbf\052\uffbf\054\uffbf\055\uffbf\001\002\000\006" +
    "\010\137\023\140\001\002\000\072\002\uffb9\004\uffb9\005" +
    "\uffb9\006\uffb9\007\uffb9\011\uffb9\012\uffb9\013\uffb9\014\uffb9" +
    "\015\uffb9\016\uffb9\017\uffb9\020\uffb9\022\uffb9\023\uffb9\024" +
    "\uffb9\025\uffb9\027\uffb9\030\uffb9\031\uffb9\032\uffb9\040\uffb9" +
    "\041\uffb9\050\uffb9\051\uffb9\052\uffb9\054\uffb9\055\uffb9\001" +
    "\002\000\072\002\uffc1\004\uffc1\005\uffc1\006\uffc1\007\uffc1" +
    "\011\uffc1\012\uffc1\013\uffc1\014\uffc1\015\uffc1\016\uffc1\017" +
    "\uffc1\020\uffc1\022\uffc1\023\uffc1\024\uffc1\025\uffc1\027\uffc1" +
    "\030\uffc1\031\uffc1\032\uffc1\040\uffc1\041\uffc1\050\uffc1\051" +
    "\uffc1\052\uffc1\054\uffc1\055\uffc1\001\002\000\072\002\uffc5" +
    "\004\uffc5\005\uffc5\006\uffc5\007\uffc5\011\uffc5\012\uffc5\013" +
    "\uffc5\014\uffc5\015\uffc5\016\uffc5\017\uffc5\020\uffc5\022\uffc5" +
    "\023\uffc5\024\131\025\uffc5\027\uffc5\030\132\031\uffc5\032" +
    "\130\040\uffc5\041\uffc5\050\uffc5\051\uffc5\052\uffc5\054\uffc5" +
    "\055\uffc5\001\002\000\064\002\uffc8\004\uffc8\005\uffc8\006" +
    "\126\007\125\011\123\012\uffc8\013\uffc8\014\uffc8\015\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\022\uffc8\023\uffc8\025\uffc8\027" +
    "\uffc8\031\uffc8\040\uffc8\041\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\054\uffc8\055\uffc8\001\002\000\056\002\uffca\004\uffca\005" +
    "\uffca\012\uffca\013\uffca\014\uffca\015\uffca\016\uffca\017\uffca" +
    "\020\uffca\022\uffca\023\uffca\025\uffca\027\uffca\031\uffca\040" +
    "\uffca\041\uffca\050\uffca\051\uffca\052\uffca\054\uffca\055\uffca" +
    "\001\002\000\056\002\uffcc\004\uffcc\005\uffcc\012\066\013" +
    "\070\014\063\015\062\016\067\017\uffcc\020\065\022\uffcc" +
    "\023\uffcc\025\uffcc\027\uffcc\031\uffcc\040\uffcc\041\uffcc\050" +
    "\uffcc\051\uffcc\052\uffcc\054\uffcc\055\uffcc\001\002\000\022" +
    "\034\073\035\103\036\075\037\101\057\100\060\076\062" +
    "\102\072\077\001\002\000\042\002\uffce\004\053\005\056" +
    "\017\uffce\022\uffce\023\uffce\025\uffce\027\uffce\031\uffce\040" +
    "\054\041\057\050\uffce\051\uffce\052\uffce\054\uffce\055\uffce" +
    "\001\002\000\004\017\051\001\002\000\030\005\023\006" +
    "\005\021\007\042\013\043\024\044\020\045\040\072\033" +
    "\073\012\074\027\075\022\001\002\000\016\002\uffe1\023" +
    "\uffe1\027\uffe1\051\uffe1\052\uffe1\055\uffe1\001\002\000\030" +
    "\005\023\006\005\021\007\042\013\043\024\044\020\045" +
    "\040\072\033\073\012\074\027\075\022\001\002\000\030" +
    "\005\uffb6\006\uffb6\021\uffb6\042\uffb6\043\uffb6\044\uffb6\045" +
    "\uffb6\072\uffb6\073\uffb6\074\uffb6\075\uffb6\001\002\000\030" +
    "\005\023\006\005\021\007\042\013\043\024\044\020\045" +
    "\040\072\033\073\012\074\027\075\022\001\002\000\030" +
    "\005\023\006\005\021\007\042\013\043\024\044\020\045" +
    "\040\072\033\073\012\074\027\075\022\001\002\000\030" +
    "\005\uffb5\006\uffb5\021\uffb5\042\uffb5\043\uffb5\044\uffb5\045" +
    "\uffb5\072\uffb5\073\uffb5\074\uffb5\075\uffb5\001\002\000\036" +
    "\002\uffcf\017\uffcf\022\uffcf\023\uffcf\025\uffcf\027\uffcf\031" +
    "\uffcf\040\054\041\057\050\uffcf\051\uffcf\052\uffcf\054\uffcf" +
    "\055\uffcf\001\002\000\056\002\uffcd\004\uffcd\005\uffcd\012" +
    "\066\013\070\014\063\015\062\016\067\017\uffcd\020\065" +
    "\022\uffcd\023\uffcd\025\uffcd\027\uffcd\031\uffcd\040\uffcd\041" +
    "\uffcd\050\uffcd\051\uffcd\052\uffcd\054\uffcd\055\uffcd\001\002" +
    "\000\030\005\uffb1\006\uffb1\021\uffb1\042\uffb1\043\uffb1\044" +
    "\uffb1\045\uffb1\072\uffb1\073\uffb1\074\uffb1\075\uffb1\001\002" +
    "\000\030\005\uffb2\006\uffb2\021\uffb2\042\uffb2\043\uffb2\044" +
    "\uffb2\045\uffb2\072\uffb2\073\uffb2\074\uffb2\075\uffb2\001\002" +
    "\000\030\005\023\006\005\021\007\042\013\043\024\044" +
    "\020\045\040\072\033\073\012\074\027\075\022\001\002" +
    "\000\030\005\uffaf\006\uffaf\021\uffaf\042\uffaf\043\uffaf\044" +
    "\uffaf\045\uffaf\072\uffaf\073\uffaf\074\uffaf\075\uffaf\001\002" +
    "\000\030\005\uffb4\006\uffb4\021\uffb4\042\uffb4\043\uffb4\044" +
    "\uffb4\045\uffb4\072\uffb4\073\uffb4\074\uffb4\075\uffb4\001\002" +
    "\000\030\005\uffb0\006\uffb0\021\uffb0\042\uffb0\043\uffb0\044" +
    "\uffb0\045\uffb0\072\uffb0\073\uffb0\074\uffb0\075\uffb0\001\002" +
    "\000\030\005\uffb3\006\uffb3\021\uffb3\042\uffb3\043\uffb3\044" +
    "\uffb3\045\uffb3\072\uffb3\073\uffb3\074\uffb3\075\uffb3\001\002" +
    "\000\056\002\uffcb\004\uffcb\005\uffcb\012\uffcb\013\uffcb\014" +
    "\uffcb\015\uffcb\016\uffcb\017\uffcb\020\uffcb\022\uffcb\023\uffcb" +
    "\025\uffcb\027\uffcb\031\uffcb\040\uffcb\041\uffcb\050\uffcb\051" +
    "\uffcb\052\uffcb\054\uffcb\055\uffcb\001\002\000\032\002\uffd0" +
    "\017\uffd0\022\uffd0\023\uffd0\025\uffd0\027\uffd0\031\uffd0\050" +
    "\uffd0\051\uffd0\052\uffd0\054\uffd0\055\uffd0\001\002\000\006" +
    "\033\uffee\072\uffee\001\002\000\004\072\122\001\002\000" +
    "\006\033\uffec\072\uffec\001\002\000\004\024\115\001\002" +
    "\000\006\033\uffea\072\uffea\001\002\000\004\026\105\001" +
    "\002\000\006\033\uffeb\072\uffeb\001\002\000\022\034\073" +
    "\035\103\036\075\037\101\057\100\060\076\062\102\072" +
    "\077\001\002\000\006\033\uffed\072\uffed\001\002\000\006" +
    "\033\uffe7\072\uffe7\001\002\000\022\034\073\035\103\036" +
    "\075\037\101\057\100\060\076\062\102\072\077\001\002" +
    "\000\004\072\114\001\002\000\006\023\112\027\111\001" +
    "\002\000\006\023\uffe5\027\uffe5\001\002\000\006\033\uffe8" +
    "\072\uffe8\001\002\000\022\034\073\035\103\036\075\037" +
    "\101\057\100\060\076\062\102\072\077\001\002\000\006" +
    "\023\uffe6\027\uffe6\001\002\000\006\023\uffe4\027\uffe4\001" +
    "\002\000\004\073\116\001\002\000\004\025\117\001\002" +
    "\000\004\061\120\001\002\000\022\034\073\035\103\036" +
    "\075\037\101\057\100\060\076\062\102\072\077\001\002" +
    "\000\006\033\uffe9\072\uffe9\001\002\000\006\010\ufffb\023" +
    "\ufffb\001\002\000\030\005\uffac\006\uffac\021\uffac\042\uffac" +
    "\043\uffac\044\uffac\045\uffac\072\uffac\073\uffac\074\uffac\075" +
    "\uffac\001\002\000\030\005\023\006\005\021\007\042\013" +
    "\043\024\044\020\045\040\072\033\073\012\074\027\075" +
    "\022\001\002\000\030\005\uffad\006\uffad\021\uffad\042\uffad" +
    "\043\uffad\044\uffad\045\uffad\072\uffad\073\uffad\074\uffad\075" +
    "\uffad\001\002\000\030\005\uffae\006\uffae\021\uffae\042\uffae" +
    "\043\uffae\044\uffae\045\uffae\072\uffae\073\uffae\074\uffae\075" +
    "\uffae\001\002\000\056\002\uffc9\004\uffc9\005\uffc9\012\uffc9" +
    "\013\uffc9\014\uffc9\015\uffc9\016\uffc9\017\uffc9\020\uffc9\022" +
    "\uffc9\023\uffc9\025\uffc9\027\uffc9\031\uffc9\040\uffc9\041\uffc9" +
    "\050\uffc9\051\uffc9\052\uffc9\054\uffc9\055\uffc9\001\002\000" +
    "\004\072\136\001\002\000\030\005\023\006\005\021\007" +
    "\042\013\043\024\044\020\045\040\072\033\073\012\074" +
    "\027\075\022\001\002\000\004\072\133\001\002\000\072" +
    "\002\uffc3\004\uffc3\005\uffc3\006\uffc3\007\uffc3\011\uffc3\012" +
    "\uffc3\013\uffc3\014\uffc3\015\uffc3\016\uffc3\017\uffc3\020\uffc3" +
    "\022\uffc3\023\uffc3\024\uffc3\025\uffc3\027\uffc3\030\uffc3\031" +
    "\uffc3\032\uffc3\040\uffc3\041\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\054\uffc3\055\uffc3\001\002\000\004\025\135\001\002\000" +
    "\072\002\uffc4\004\uffc4\005\uffc4\006\uffc4\007\uffc4\011\uffc4" +
    "\012\uffc4\013\uffc4\014\uffc4\015\uffc4\016\uffc4\017\uffc4\020" +
    "\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\027\uffc4\030\uffc4" +
    "\031\uffc4\032\uffc4\040\uffc4\041\uffc4\050\uffc4\051\uffc4\052" +
    "\uffc4\054\uffc4\055\uffc4\001\002\000\072\002\uffc2\004\uffc2" +
    "\005\uffc2\006\uffc2\007\uffc2\011\uffc2\012\uffc2\013\uffc2\014" +
    "\uffc2\015\uffc2\016\uffc2\017\uffc2\020\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\040" +
    "\uffc2\041\uffc2\050\uffc2\051\uffc2\052\uffc2\054\uffc2\055\uffc2" +
    "\001\002\000\052\005\023\006\005\021\007\026\004\042" +
    "\013\043\024\044\020\045\040\047\017\053\034\056\015" +
    "\063\021\064\010\065\031\066\011\067\032\072\033\073" +
    "\012\074\027\075\022\001\002\000\010\046\035\070\046" +
    "\071\014\001\002\000\006\010\ufffe\023\ufffe\001\002\000" +
    "\010\002\001\023\143\027\001\001\002\000\052\005\023" +
    "\006\005\021\007\026\004\042\013\043\024\044\020\045" +
    "\040\047\017\053\034\056\015\063\021\064\010\065\031" +
    "\066\011\067\032\072\033\073\012\074\027\075\022\001" +
    "\002\000\010\002\uffe3\023\uffe3\027\uffe3\001\002\000\004" +
    "\021\147\001\002\000\004\026\004\001\002\000\026\022" +
    "\ufff5\031\ufff5\034\073\035\103\036\075\037\101\057\100" +
    "\060\076\062\102\072\077\001\002\000\006\022\ufff6\031" +
    "\ufff6\001\002\000\006\033\156\072\ufff2\001\002\000\006" +
    "\022\154\031\153\001\002\000\022\034\073\035\103\036" +
    "\075\037\101\057\100\060\076\062\102\072\077\001\002" +
    "\000\004\026\ufff8\001\002\000\006\022\ufff7\031\ufff7\001" +
    "\002\000\004\072\ufff3\001\002\000\004\072\160\001\002" +
    "\000\006\022\ufff4\031\ufff4\001\002\000\006\010\ufff9\023" +
    "\ufff9\001\002\000\004\054\163\001\002\000\056\005\023" +
    "\006\005\021\007\023\uffd4\026\004\042\013\043\024\044" +
    "\020\045\040\047\017\053\034\055\uffd4\056\015\063\021" +
    "\064\010\065\031\066\011\067\032\072\033\073\012\074" +
    "\027\075\022\001\002\000\012\023\uffd5\051\uffd5\052\uffd5" +
    "\055\uffd5\001\002\000\006\023\167\055\166\001\002\000" +
    "\016\002\uffde\023\uffde\027\uffde\051\uffde\052\uffde\055\uffde" +
    "\001\002\000\052\005\023\006\005\021\007\026\004\042" +
    "\013\043\024\044\020\045\040\047\017\053\034\056\015" +
    "\063\021\064\010\065\031\066\011\067\032\072\033\073" +
    "\012\074\027\075\022\001\002\000\012\023\uffd6\051\uffd6" +
    "\052\uffd6\055\uffd6\001\002\000\016\002\uffdd\023\uffdd\027" +
    "\uffdd\051\uffdd\052\uffdd\055\uffdd\001\002\000\004\002\000" +
    "\001\002\000\072\002\uffc7\004\uffc7\005\uffc7\006\uffc7\007" +
    "\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7\015\uffc7\016\uffc7" +
    "\017\uffc7\020\uffc7\022\uffc7\023\uffc7\024\131\025\uffc7\027" +
    "\uffc7\030\132\031\uffc7\032\130\040\uffc7\041\uffc7\050\uffc7" +
    "\051\uffc7\052\uffc7\054\uffc7\055\uffc7\001\002\000\016\002" +
    "\uffda\023\uffda\027\uffda\051\uffda\052\uffda\055\uffda\001\002" +
    "\000\004\050\176\001\002\000\060\005\023\006\005\021" +
    "\007\023\uffd4\026\004\042\013\043\024\044\020\045\040" +
    "\047\017\051\uffd4\052\uffd4\053\034\056\015\063\021\064" +
    "\010\065\031\066\011\067\032\072\033\073\012\074\027" +
    "\075\022\001\002\000\010\023\167\051\200\052\201\001" +
    "\002\000\056\005\023\006\005\021\007\023\uffd4\026\004" +
    "\042\013\043\024\044\020\045\040\047\017\052\uffd4\053" +
    "\034\056\015\063\021\064\010\065\031\066\011\067\032" +
    "\072\033\073\012\074\027\075\022\001\002\000\016\002" +
    "\uffe0\023\uffe0\027\uffe0\051\uffe0\052\uffe0\055\uffe0\001\002" +
    "\000\006\023\167\052\203\001\002\000\016\002\uffdf\023" +
    "\uffdf\027\uffdf\051\uffdf\052\uffdf\055\uffdf\001\002\000\004" +
    "\021\205\001\002\000\034\005\023\006\005\021\007\022" +
    "\uffd1\031\uffd1\042\013\043\024\044\020\045\040\072\033" +
    "\073\012\074\027\075\022\001\002\000\006\022\211\031" +
    "\210\001\002\000\006\022\uffd2\031\uffd2\001\002\000\030" +
    "\005\023\006\005\021\007\042\013\043\024\044\020\045" +
    "\040\072\033\073\012\074\027\075\022\001\002\000\016" +
    "\002\uffd8\023\uffd8\027\uffd8\051\uffd8\052\uffd8\055\uffd8\001" +
    "\002\000\006\022\uffd3\031\uffd3\001\002\000\004\072\214" +
    "\001\002\000\006\010\ufffa\023\ufffa\001\002\000\064\002" +
    "\uffc6\004\uffc6\005\uffc6\006\uffc6\007\uffc6\011\uffc6\012\uffc6" +
    "\013\uffc6\014\uffc6\015\uffc6\016\uffc6\017\uffc6\020\uffc6\022" +
    "\uffc6\023\uffc6\025\uffc6\027\uffc6\031\uffc6\040\uffc6\041\uffc6" +
    "\050\uffc6\051\uffc6\052\uffc6\054\uffc6\055\uffc6\001\002\000" +
    "\016\002\uffdc\023\uffdc\027\uffdc\051\uffdc\052\uffdc\055\uffdc" +
    "\001\002\000\016\002\uffd9\023\uffd9\027\uffd9\051\uffd9\052" +
    "\uffd9\055\uffd9\001\002\000\004\022\221\001\002\000\072" +
    "\002\uffb7\004\uffb7\005\uffb7\006\uffb7\007\uffb7\011\uffb7\012" +
    "\uffb7\013\uffb7\014\uffb7\015\uffb7\016\uffb7\017\uffb7\020\uffb7" +
    "\022\uffb7\023\uffb7\024\uffb7\025\uffb7\027\uffb7\030\uffb7\031" +
    "\uffb7\032\uffb7\040\uffb7\041\uffb7\050\uffb7\051\uffb7\052\uffb7" +
    "\054\uffb7\055\uffb7\001\002\000\072\002\uffc0\004\uffc0\005" +
    "\uffc0\006\uffc0\007\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0" +
    "\015\uffc0\016\uffc0\017\uffc0\020\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0\040\uffc0" +
    "\041\uffc0\050\uffc0\051\uffc0\052\uffc0\054\uffc0\055\uffc0\001" +
    "\002\000\004\027\225\001\002\000\004\027\ufff0\001\002" +
    "\000\020\002\ufff1\010\ufff1\023\ufff1\027\ufff1\051\ufff1\052" +
    "\ufff1\055\ufff1\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\036\002\024\004\036\005\005\012\027\016" +
    "\025\017\015\022\047\023\046\024\044\025\043\026\042" +
    "\027\041\030\040\031\035\001\001\000\040\002\223\003" +
    "\222\004\036\005\005\012\027\016\025\017\015\022\047" +
    "\023\046\024\044\025\043\026\042\027\041\030\040\031" +
    "\035\001\001\000\006\030\221\031\035\001\001\000\002" +
    "\001\001\000\022\022\217\023\046\024\044\025\043\026" +
    "\042\027\041\030\040\031\035\001\001\000\022\022\216" +
    "\023\046\024\044\025\043\026\042\027\041\030\040\031" +
    "\035\001\001\000\022\022\215\023\046\024\044\025\043" +
    "\026\042\027\041\030\040\031\035\001\001\000\002\001" +
    "\001\000\012\026\214\027\041\030\040\031\035\001\001" +
    "\000\004\013\212\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\022\174\023\046\024\044\025\043\026\042" +
    "\027\041\030\040\031\035\001\001\000\002\001\001\000" +
    "\022\022\173\023\046\024\044\025\043\026\042\027\041" +
    "\030\040\031\035\001\001\000\002\001\001\000\010\027" +
    "\172\030\040\031\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\022\170\023\046\024\044\025\043\026\042" +
    "\027\041\030\040\031\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\022\022\161\023\046\024\044\025\043" +
    "\026\042\027\041\030\040\031\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\034\123\001" +
    "\001\000\002\001\001\000\004\033\063\001\001\000\004" +
    "\013\073\001\001\000\004\032\054\001\001\000\002\001" +
    "\001\000\022\022\051\023\046\024\044\025\043\026\042" +
    "\027\041\030\040\031\035\001\001\000\002\001\001\000" +
    "\022\022\071\023\046\024\044\025\043\026\042\027\041" +
    "\030\040\031\035\001\001\000\002\001\001\000\016\024" +
    "\060\025\043\026\042\027\041\030\040\031\035\001\001" +
    "\000\020\023\057\024\044\025\043\026\042\027\041\030" +
    "\040\031\035\001\001\000\002\001\001\000\004\032\054" +
    "\001\001\000\004\033\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\025\070\026\042\027\041\030\040" +
    "\031\035\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\013\105\014\106\015\107" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\013\105\015\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\120\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\026\126\027\041\030\040\031\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\022\022\133\023\046\024\044\025\043\026\042" +
    "\027\041\030\040\031\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\012\027\016\141\017\015\022\047\023" +
    "\046\024\044\025\043\026\042\027\041\030\040\031\035" +
    "\001\001\000\004\005\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\012\027\017\143\022\047\023\046" +
    "\024\044\025\043\026\042\027\041\030\040\031\035\001" +
    "\001\000\002\001\001\000\004\007\145\001\001\000\004" +
    "\012\160\001\001\000\010\006\151\010\147\013\150\001" +
    "\001\000\002\001\001\000\004\011\156\001\001\000\002" +
    "\001\001\000\006\010\154\013\150\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\030\012\027\017\163\020\164\022\047\023\046\024\044" +
    "\025\043\026\042\027\041\030\040\031\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\012\027\017\167\022\047\023\046\024\044\025\043\026" +
    "\042\027\041\030\040\031\035\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\012\027\017\163" +
    "\020\176\022\047\023\046\024\044\025\043\026\042\027" +
    "\041\030\040\031\035\001\001\000\002\001\001\000\030" +
    "\012\027\017\163\020\201\022\047\023\046\024\044\025" +
    "\043\026\042\027\041\030\040\031\035\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\021\205\022\206\023\046\024\044\025\043" +
    "\026\042\027\041\030\040\031\035\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\022\211\023\046\024\044" +
    "\025\043\026\042\027\041\030\040\031\035\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorAST$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorAST$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    @SuppressWarnings("rawtypes") java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorAST$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErroresTiny1();
   AnalizadorLexicoTiny1 analizadorLexico = (AnalizadorLexicoTiny1)getScanner();
   analizadorLexico.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErroresTiny1 errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorAST$actions {


   private SemOps sem = new SemOps();

  private final ConstructorAST parser;

  /** Constructor */
  CUP$ConstructorAST$actions(ConstructorAST parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action_part00000000(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    @SuppressWarnings("rawtypes") java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorAST$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorAST$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Programa ::= LDecs SEP LIns 
            {
              Programa RESULT =null;
		LDecs ldecs = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		LIns lins = (LIns)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.programa_con_decs(ldecs, lins); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Programa EOF 
            {
              Object RESULT =null;
		Programa start_val = (Programa)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorAST$parser.done_parsing();
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Programa ::= LIns 
            {
              Programa RESULT =null;
		LIns lins = (LIns)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.programa_sin_decs(lins); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Programa",0, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LDecs ::= LDecs PYC Dec 
            {
              LDecs RESULT =null;
		LDecs ldecs = (LDecs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.decs_muchas(ldecs, dec); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LDecs",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LDecs ::= Dec 
            {
              LDecs RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.decs_1(dec); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LDecs",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LDecs ::= 
            {
              LDecs RESULT =null;
		 RESULT = null; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LDecs",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Dec ::= VAR Tipo IDEN 
            {
              Dec RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.dec_var(tipo, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Dec ::= TYPE Tipo IDEN 
            {
              Dec RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.dec_type(tipo, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Dec ::= PROC IDEN ParForm Bloque 
            {
              Dec RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		LParams parform = (LParams)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.dec_proc(id, parform, bloque); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // ParForm ::= PAPER LParams PCIERRE 
            {
              LParams RESULT =null;
		LParams lparams = (LParams)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = lparams; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ParForm",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LParams ::= LParams COMA Param 
            {
              LParams RESULT =null;
		LParams lparams = (LParams)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Param param = (Param)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.lparams_muchos(lparams, param); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LParams",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LParams ::= Param 
            {
              LParams RESULT =null;
		Param param = (Param)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.lparams_1(param); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LParams",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LParams ::= 
            {
              LParams RESULT =null;
		 RESULT = null; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LParams",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Param ::= Tipo Referencia IDEN 
            {
              Param RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Referencia ref = (Referencia)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.param(tipo, ref, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Param",6, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Referencia ::= AMPERSAND 
            {
              Referencia RESULT =null;
		 RESULT = sem.referencia(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Referencia",7, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Referencia ::= 
            {
              Referencia RESULT =null;
		 RESULT = null; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Referencia",7, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Bloque ::= LLAVEAPER ProgramaBloque LLAVECIERRE 
            {
              Bloque RESULT =null;
		Programa programabloque = (Programa)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.bloque(programabloque); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Bloque",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ProgramaBloque ::= Programa 
            {
              Programa RESULT =null;
		Programa programa = (Programa)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = programa; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ProgramaBloque",1, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ProgramaBloque ::= 
            {
              Programa RESULT =null;
		 RESULT = null; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("ProgramaBloque",1, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Tipo ::= INT 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_int(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Tipo ::= REAL 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_real(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Tipo ::= BOOL 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_bool(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Tipo ::= STRING 
            {
              Tipo RESULT =null;
		 RESULT = sem.tipo_string(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Tipo ::= IDEN 
            {
              Tipo RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipo_id(id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Tipo ::= ARRAY CORAPER NUMENT CORCIERRE OF Tipo 
            {
              Tipo RESULT =null;
		StringLocalizado nument = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipo_array(nument, tipo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Tipo ::= RECORD LLAVEAPER LCampos LLAVECIERRE 
            {
              Tipo RESULT =null;
		LCampos lcampos = (LCampos)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.tipo_record(lcampos); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Tipo ::= POINTER Tipo 
            {
              Tipo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.tipo_pointer(tipo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Tipo",9, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // LCampos ::= LCampos PYC Campo 
            {
              LCampos RESULT =null;
		LCampos lcampos = (LCampos)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.lcampos_muchos(lcampos, campo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LCampos",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // LCampos ::= Campo 
            {
              LCampos RESULT =null;
		Campo campo = (Campo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.lcampos_1(campo); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LCampos",10, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Campo ::= Tipo IDEN 
            {
              Campo RESULT =null;
		Tipo tipo = (Tipo)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.campo(tipo, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Campo",11, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LIns ::= LIns PYC Ins 
            {
              LIns RESULT =null;
		LIns lins = (LIns)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.lins_muchas(lins, ins); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LIns",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LIns ::= Ins 
            {
              LIns RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.lins_1(ins); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LIns",12, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Ins ::= E0 IGUAL E0 
            {
              Ins RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.ins_asignacion(exp1, exp2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Ins",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Ins ::= IF E0 THEN LInsV ENDIF 
            {
              Ins RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		LInsV linsv = (LInsV)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.ins_if(exp, linsv); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Ins",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Ins ::= IF E0 THEN LInsV ELSE LInsV ENDIF 
            {
              Ins RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-5)).value;
		LInsV linsv1 = (LInsV)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		LInsV linsv2 = (LInsV)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.ins_if_else(exp, linsv1, linsv2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Ins",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Ins ::= WHILE E0 DO LInsV ENDWHILE 
            {
              Ins RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		LInsV linsv = (LInsV)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.ins_while(exp, linsv); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Ins",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Ins ::= READ E0 
            {
              Ins RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.ins_read(exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Ins",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Ins ::= WRITE E0 
            {
              Ins RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.ins_write(exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Ins",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Ins ::= NL 
            {
              Ins RESULT =null;
		 RESULT = sem.ins_nl(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Ins",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // Ins ::= NEW E0 
            {
              Ins RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.ins_new(exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Ins",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // Ins ::= DELETE E0 
            {
              Ins RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.ins_delete(exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Ins",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // Ins ::= CALL IDEN PAPER LParamsReales PCIERRE 
            {
              Ins RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		LParamsReales lparamsreales = (LParamsReales)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.ins_call(id, lparamsreales); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Ins",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // Ins ::= Bloque 
            {
              Ins RESULT =null;
		Bloque bloque = (Bloque)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.ins_bloque(bloque); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Ins",13, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LInsV ::= LInsV PYC Ins 
            {
              LInsV RESULT =null;
		LInsV linsv = (LInsV)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.linsv_muchas(linsv, ins); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LInsV",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LInsV ::= Ins 
            {
              LInsV RESULT =null;
		Ins ins = (Ins)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.linsv_1(ins); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LInsV",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LInsV ::= 
            {
              LInsV RESULT =null;
		 RESULT = null; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LInsV",14, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LParamsReales ::= LParamsReales COMA E0 
            {
              LParamsReales RESULT =null;
		LParamsReales lparamsreales = (LParamsReales)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.preales_muc(lparamsreales, exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LParamsReales",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LParamsReales ::= E0 
            {
              LParamsReales RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.preales_1(exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LParamsReales",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LParamsReales ::= 
            {
              LParamsReales RESULT =null;
		 RESULT = null; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("LParamsReales",15, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // E0 ::= E1 MAS E0 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.suma(exp1, exp2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",16, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // E0 ::= E1 MENOS E1 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.resta(exp1, exp2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",16, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // E0 ::= E1 
            {
              Exp RESULT =null;
		Exp aDeE1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = aDeE1; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",16, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // E1 ::= E1 OpN1 E2 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp(op, exp1, exp2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E1",17, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // E1 ::= E2 
            {
              Exp RESULT =null;
		Exp aDeE2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = aDeE2; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E1",17, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // E2 ::= E2 OpN2 E3 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp(op, exp1, exp2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",18, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // E2 ::= E3 
            {
              Exp RESULT =null;
		Exp aDeE3 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = aDeE3; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",18, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // E3 ::= E4 OpN3 E4 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		String op = (String)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp(op, exp1, exp2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E3",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // E3 ::= E4 
            {
              Exp RESULT =null;
		Exp aDeE4 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = aDeE4; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E3",19, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // E4 ::= MENOS E5 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.menos(exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // E4 ::= NOT E4 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.not(exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // E4 ::= E5 
            {
              Exp RESULT =null;
		Exp aDeE5 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = aDeE5; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E4",20, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // E5 ::= E5 CORAPER E0 CORCIERRE 
            {
              Exp RESULT =null;
		Exp exp1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-3)).value;
		Exp exp2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = sem.index(exp1, exp2); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",21, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // E5 ::= E5 PUNTO IDEN 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.access_reg_punto(exp, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",21, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // E5 ::= E5 FLECHA IDEN 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.access_reg_flecha(exp, id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",21, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // E5 ::= E6 
            {
              Exp RESULT =null;
		Exp aDeE6 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = aDeE6; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E5",21, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // E6 ::= POR E6 
            {
              Exp RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.indireccion(exp); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E6",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // E6 ::= E7 
            {
              Exp RESULT =null;
		Exp aDeE7 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = aDeE7; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E6",22, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // E7 ::= IDEN 
            {
              Exp RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.identificador(id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // E7 ::= NUMENT 
            {
              Exp RESULT =null;
		StringLocalizado nument = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.numEnt(nument); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // E7 ::= NUMREAL 
            {
              Exp RESULT =null;
		StringLocalizado numreal = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.numReal(numreal); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // E7 ::= CADENA 
            {
              Exp RESULT =null;
		StringLocalizado cadena = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.cadena(cadena); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // E7 ::= TRUE 
            {
              Exp RESULT =null;
		 RESULT = sem.true_p(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // E7 ::= FALSE 
            {
              Exp RESULT =null;
		 RESULT = sem.false_p(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // E7 ::= NULL 
            {
              Exp RESULT =null;
		 RESULT = sem.null_p(); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // E7 ::= PAPER E0 PCIERRE 
            {
              Exp RESULT =null;
		Exp aDeE0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = aDeE0; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E7",23, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // OpN1 ::= AND 
            {
              String RESULT =null;
		 RESULT = "and"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OpN1",24, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // OpN1 ::= OR 
            {
              String RESULT =null;
		 RESULT = "or"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OpN1",24, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OpN2 ::= MENOR 
            {
              String RESULT =null;
		 RESULT = "<"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OpN2",25, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OpN2 ::= MAYOR 
            {
              String RESULT =null;
		 RESULT = ">"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OpN2",25, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // OpN2 ::= MENORIGUAL 
            {
              String RESULT =null;
		 RESULT = "<="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OpN2",25, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // OpN2 ::= MAYORIGUAL 
            {
              String RESULT =null;
		 RESULT = ">="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OpN2",25, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // OpN2 ::= IGUALDAD 
            {
              String RESULT =null;
		 RESULT = "=="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OpN2",25, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OpN2 ::= DISTINTO 
            {
              String RESULT =null;
		 RESULT = "!="; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OpN2",25, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OpN3 ::= POR 
            {
              String RESULT =null;
		 RESULT = "*"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OpN3",26, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // OpN3 ::= DIV 
            {
              String RESULT =null;
		 RESULT = "/"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OpN3",26, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // OpN3 ::= MOD 
            {
              String RESULT =null;
		 RESULT = "%"; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OpN3",26, RESULT);
            }
          return CUP$ConstructorAST$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorAST$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    @SuppressWarnings("rawtypes") java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorAST$do_action_part00000000(
                               CUP$ConstructorAST$act_num,
                               CUP$ConstructorAST$parser,
                               CUP$ConstructorAST$stack,
                               CUP$ConstructorAST$top);
    }
}

