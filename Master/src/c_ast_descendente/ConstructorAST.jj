options  {
  STATIC=false;
}  
PARSER_BEGIN(ConstructorAST)
package c_ast_descendente;

import asint.TinyASint.Exp;
import asint.TinyASint.Dec;
import asint.TinyASint.Decs;
import asint.TinyASint.Prog;
import semops.SemOps;


public class ConstructorAST {
   private SemOps sem = new SemOps();
}
PARSER_END(ConstructorAST)
  TOKEN:{<#letra:["a"-"z","A"-"Z"]>}
  TOKEN:{<#digitoPositivo:["1"-"9"]>}
  TOKEN:{<#digito:<digitoPositivo>|"0">} 
  TOKEN:{<#parteEntera:<digitoPositivo> (<digito>)* |"0">} 
  TOKEN:{<#parteDecimal: (<digito>)* <digitoPositivo>>}
  SKIP:{<["\t"," ","\r","\b","\n"]>}  
  SKIP:{<"#"(~["\n"])*>}  
  TOKEN: {<donde:"donde">}
  TOKEN: {<evalua:"evalua">}
  TOKEN:{<id:<letra>(<letra>|<digito>)*>}
  TOKEN:{<num: (["+","-"])? <parteEntera> ("." <parteDecimal>)? >  }
  
  Prog Init()    : {Prog prog;} {prog=Prog() <EOF> {return prog;}}
  Prog Prog()    : {Exp exp; Decs decs;} 
                    {<evalua> exp=E0() decs=PDonde() {return sem.prog(exp,decs);}}
  Decs PDonde()  : {Decs decs;} 
                       {<donde> decs=Decs() {return decs;} | 
                       {return null;}}
  Exp E0()       : {Exp exp1, resul;} {exp1=E1() resul=RE0(exp1) {return resul;}}
  Exp RE0(Exp exph) : {char op; Exp exp1; Exp exp;} 
                       {op=OP0() exp1=E2() exp=RE0(sem.exp(op,exph,exp1)) {return exp;} |
                       {return exph;}}
  Exp E1()       : {Exp exp2, resul;} {exp2=E2() resul=RE1(exp2) {return resul;}}
  Exp RE1(Exp exph) : {char op; Exp exp2; Exp exp;} 
                       {op=OP1() exp2=E2() exp=RE1(sem.exp(op,exph,exp2)) {return exp;} |
                       {return exph;}}
  Exp E2()         : {Exp exp; Token t;}  
                        {t=<num> {return sem.num(sem.str(t.image,t.beginLine,t.beginColumn));} |
                         t=<id>  {return sem.id(sem.str(t.image,t.beginLine,t.beginColumn));} |
						"(" exp=E0() ")" {return exp;}}
  char OP0() : {} {"+" {return '+';} |
                   "-" {return '-';}}						
  char OP1() : {} {"*" {return '*';} |
                   "/" {return '/';}}
  Decs Decs() : {Dec dec; Decs decs;} {dec=Dec() decs=RDecs(sem.decs_una(dec)) {return decs;}}
  Decs RDecs(Decs decsh) : {Dec dec; Decs decs;} 
                             {"," dec=Dec() decs=RDecs(sem.decs_muchas(decsh,dec)) {return decs;} |
                             {return decsh;}}
  Dec Dec() : {Token iden,numb;} {iden=<id> "=" numb=<num> 
                                    {return sem.dec(sem.str(iden.image,iden.beginLine,iden.beginColumn),
                                                    sem.str(numb.image,numb.endLine,numb.endColumn));}}					 
