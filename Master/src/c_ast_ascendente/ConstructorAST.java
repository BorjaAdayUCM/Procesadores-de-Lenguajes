
//----------------------------------------------------
// The following code was generated by CUP v0.11b beta 20140220
// Sun Apr 26 12:29:56 CEST 2020
//----------------------------------------------------

package c_ast_ascendente;

import java_cup.runtime.*;
import semops.SemOps;
import asint.TinyASint.Prog;
import asint.TinyASint.Exp;
import asint.TinyASint.Decs;
import asint.TinyASint.Dec;
import asint.TinyASint.StringLocalizado;
import java_cup.runtime.ComplexSymbolFactory.Location;

/** CUP v0.11b beta 20140220 generated parser.
  * @version Sun Apr 26 12:29:56 CEST 2020
  */
public class ConstructorAST extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ConstructorAST() {super();}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ConstructorAST(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\022\000\002\002\005\000\002\002\004\000\002\003" +
    "\004\000\002\003\002\000\002\006\005\000\002\006\003" +
    "\000\002\007\005\000\002\007\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\005\000\002\011\003\000\002" +
    "\011\003\000\002\012\003\000\002\012\003\000\002\004" +
    "\005\000\002\004\003\000\002\005\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\004\013\005\001\002\000\004\002\037\001" +
    "\002\000\010\010\012\016\010\017\006\001\002\000\020" +
    "\002\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\011\ufff8\012" +
    "\ufff8\001\002\000\020\002\ufffc\004\ufffc\005\ufffc\006\024" +
    "\007\023\011\ufffc\012\ufffc\001\002\000\020\002\ufff9\004" +
    "\ufff9\005\ufff9\006\ufff9\007\ufff9\011\ufff9\012\ufff9\001\002" +
    "\000\012\002\ufffe\004\015\005\020\012\026\001\002\000" +
    "\010\010\012\016\010\017\006\001\002\000\020\002\ufffa" +
    "\004\ufffa\005\ufffa\006\ufffa\007\ufffa\011\ufffa\012\ufffa\001" +
    "\002\000\010\004\015\005\020\011\016\001\002\000\010" +
    "\010\ufff6\016\ufff6\017\ufff6\001\002\000\020\002\ufff7\004" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\011\ufff7\012\ufff7\001\002" +
    "\000\010\010\012\016\010\017\006\001\002\000\010\010" +
    "\ufff5\016\ufff5\017\ufff5\001\002\000\020\002\ufffd\004\ufffd" +
    "\005\ufffd\006\024\007\023\011\ufffd\012\ufffd\001\002\000" +
    "\010\010\012\016\010\017\006\001\002\000\010\010\ufff3" +
    "\016\ufff3\017\ufff3\001\002\000\010\010\ufff4\016\ufff4\017" +
    "\ufff4\001\002\000\020\002\ufffb\004\ufffb\005\ufffb\006\ufffb" +
    "\007\ufffb\011\ufffb\012\ufffb\001\002\000\004\017\030\001" +
    "\002\000\004\002\001\001\002\000\004\015\035\001\002" +
    "\000\006\002\uffff\014\033\001\002\000\006\002\ufff1\014" +
    "\ufff1\001\002\000\004\017\030\001\002\000\006\002\ufff2" +
    "\014\ufff2\001\002\000\004\016\036\001\002\000\006\002" +
    "\ufff0\014\ufff0\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\035\000\004\002\003\001\001\000\002\001\001\000" +
    "\010\006\010\007\006\010\012\001\001\000\002\001\001" +
    "\000\004\012\021\001\001\000\002\001\001\000\006\003" +
    "\026\011\016\001\001\000\010\006\013\007\006\010\012" +
    "\001\001\000\002\001\001\000\004\011\016\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\007\020\010\012" +
    "\001\001\000\002\001\001\000\004\012\021\001\001\000" +
    "\004\010\024\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\004\030\005\031\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\033\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ConstructorAST$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ConstructorAST$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ConstructorAST$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
 
   errores = new GestionErrores();
   AnalizadorLexico alex = (AnalizadorLexico)getScanner();
   alex.fijaGestionErrores(errores);

    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }

 
   private GestionErrores errores;
   public void syntax_error(Symbol unidadLexica) {
     errores.errorSintactico((UnidadLexica)unidadLexica);
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ConstructorAST$actions {


   private SemOps sem = new SemOps();

  private final ConstructorAST parser;

  /** Constructor */
  CUP$ConstructorAST$actions(ConstructorAST parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action_part00000000(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ConstructorAST$result;

      /* select the action based on the action number */
      switch (CUP$ConstructorAST$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Prog ::= EVALUA E0 PDonde 
            {
              Prog RESULT =null;
		Exp exp = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.prog(exp,decs);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Prog",0, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Prog EOF 
            {
              Object RESULT =null;
		Prog start_val = (Prog)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		RESULT = start_val;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("$START",0, RESULT);
            }
          /* ACCEPT */
          CUP$ConstructorAST$parser.done_parsing();
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PDonde ::= DONDE Decs 
            {
              Decs RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = decs;
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PDonde",1, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PDonde ::= 
            {
              Decs RESULT =null;
		 RESULT = null; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("PDonde",1, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // E0 ::= E0 OP0 E1 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Character op = (Character)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp(op,arg0,arg1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // E0 ::= E1 
            {
              Exp RESULT =null;
		Exp aDeE1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = aDeE1; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E0",4, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // E1 ::= E1 OP1 E2 
            {
              Exp RESULT =null;
		Exp arg0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Character op = (Character)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		Exp arg1 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.exp(op,arg0,arg1); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E1",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // E1 ::= E2 
            {
              Exp RESULT =null;
		Exp aDeE2 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = aDeE2; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E1",5, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // E2 ::= NUM 
            {
              Exp RESULT =null;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.num(num); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",6, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // E2 ::= ID 
            {
              Exp RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.id(id); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",6, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // E2 ::= PAP E0 PCIERRE 
            {
              Exp RESULT =null;
		Exp aDeE0 = (Exp)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-1)).value;
		 RESULT = aDeE0; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("E2",6, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // OP0 ::= MAS 
            {
              Character RESULT =null;
		 RESULT = '+'; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP0",7, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // OP0 ::= MENOS 
            {
              Character RESULT =null;
		RESULT = '-'; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP0",7, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // OP1 ::= POR 
            {
              Character RESULT =null;
		 RESULT = '*'; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP1",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // OP1 ::= DIV 
            {
              Character RESULT =null;
		 RESULT = '/'; 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("OP1",8, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Decs ::= Decs COMA Dec 
            {
              Decs RESULT =null;
		Decs decs = (Decs)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.decs_muchas(decs,dec);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Decs",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Decs ::= Dec 
            {
              Decs RESULT =null;
		Dec dec = (Dec)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.decs_una(dec);
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Decs",2, RESULT);
            }
          return CUP$ConstructorAST$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // Dec ::= ID IGUAL NUM 
            {
              Dec RESULT =null;
		StringLocalizado id = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.elementAt(CUP$ConstructorAST$top-2)).value;
		StringLocalizado num = (StringLocalizado)((java_cup.runtime.Symbol) CUP$ConstructorAST$stack.peek()).value;
		 RESULT = sem.dec(id,num); 
              CUP$ConstructorAST$result = parser.getSymbolFactory().newSymbol("Dec",3, RESULT);
            }
          return CUP$ConstructorAST$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ConstructorAST$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ConstructorAST$do_action(
    int                        CUP$ConstructorAST$act_num,
    java_cup.runtime.lr_parser CUP$ConstructorAST$parser,
    java.util.Stack            CUP$ConstructorAST$stack,
    int                        CUP$ConstructorAST$top)
    throws java.lang.Exception
    {
              return CUP$ConstructorAST$do_action_part00000000(
                               CUP$ConstructorAST$act_num,
                               CUP$ConstructorAST$parser,
                               CUP$ConstructorAST$stack,
                               CUP$ConstructorAST$top);
    }
}

